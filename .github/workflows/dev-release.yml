name: DEV Release Automation

on:
  push:
    branches:
      - alpha
  workflow_dispatch:

jobs:
  manage-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository with Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: 🧼 Ensure clean submodule state
        run: |
          git submodule sync --recursive

      - name: 🧹 Clean up possible leftover submodules
        run: |
          git submodule deinit -f --all || true
          rm -rf .git/modules/* || true

      - name: 🔄 Init & update all submodules recursively
        run: |
          echo "🔁 Initializing and updating all submodules recursively..."
          git submodule update --init --force --recursive
          
          echo ""
          echo "📋 Submodule list from .gitmodules:"
          cat .gitmodules

          echo ""
          echo "📌 Currently initialized submodules:"
          git submodule status --recursive

          echo ""
          echo "📁 All folders in repo root:"
          ls -la

      - name: 🔀 Switch all submodules to 'dev' branch (if exists)
        run: |
          echo "📦 Updating submodules to 'dev' branches..."

          git submodule foreach --recursive '
            echo ""
            echo "📁 Submodule: $name"
            echo "📍 Path: $path"
            git fetch origin
            if git show-ref --verify --quiet refs/remotes/origin/dev; then
              echo "✅ Branch \"dev\" found. Checking out..."
              git checkout dev
              git pull origin dev
            else
              echo "⚠️ Branch \"dev\" not found in $name"
            fi
          '

      - name: Commit updated submodule references
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Update submodules to dev branches"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Delete existing DEV release
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          if gh release view DEV &>/dev/null; then
            echo "🧹 Deleting existing DEV release..."
            gh release delete DEV --yes
          else
            echo "ℹ️ No existing DEV release found."
          fi

      - name: Create ZIP with full source including submodules
        run: |
          timestamp=$(TZ=Europe/Vienna date +"%Y%m%d_%H%M%S")
          echo "Using timestamp: $timestamp"
          echo "$timestamp" > release_timestamp.txt

          mkdir package
          rsync -a --exclude='.git' ./ package/

          # Include all submodules recursively with path
          git submodule foreach --recursive '
            fullpath=$(realpath .)
            relpath=${fullpath#$(realpath "$toplevel")/}
            echo "Including submodule: $relpath"
            mkdir -p "$toplevel/package/$relpath"
            rsync -a --exclude=".git" "$fullpath/" "$toplevel/package/$relpath/"
          '

          cd package
          zip -r ../ddpc_alpha.zip . -x '*.git*' '*.github*' '*.vscode*' '*node_modules*'
          cd ..

      - name: Create new DEV release and upload ZIP
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          timestamp=$(cat release_timestamp.txt)
          release_name="alpha_${timestamp}"
          echo "Creating release: $release_name"
          gh release create DEV ddpc_alpha.zip \
            --title "$release_name" \
            --notes "Automatisch generiertes DEV Release vom $timestamp"

name: DEV Release Automation

on:
  push:
    branches:
      - alpha
  workflow_dispatch:

jobs:
  manage-release:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository with Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: 📋 Show All Submodules
        run: |
          echo "🔍 Listing all submodules:"
          git config --file .gitmodules --get-regexp path | while read -r key path; do
            url=$(git config --file .gitmodules --get "${key/path/url}")
            echo " - $path ($url)"
          done

      - name: 🔄 Switch all submodules to 'dev' branch (recursive)
        run: |
          git submodule update --init --recursive

          git submodule foreach --recursive '
            echo "🔧 Updating submodule: $name"
            git fetch origin
            if git rev-parse --verify origin/dev >/dev/null 2>&1; then
              git checkout dev
              git pull origin dev
              echo "✅ Checked out dev branch for $name"
            else
              echo "⚠️ Branch dev not found for submodule $name"
            fi
          '

      - name: 💾 Commit updated submodule references (if any)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Update submodules to dev branches"
            echo "✅ Changes committed."
          else
            echo "ℹ️ No changes to commit."
          fi

      - name: 🗑️ Delete existing DEV release (if exists)
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          if gh release view DEV &>/dev/null; then
            echo "🧹 Deleting existing DEV release..."
            gh release delete DEV --yes
          else
            echo "ℹ️ No existing DEV release found."
          fi

      - name: 📦 Create ZIP with full source including submodules
        run: |
          timestamp=$(TZ=Europe/Vienna date +"%Y%m%d_%H%M%S")
          echo "🕒 Using timestamp: $timestamp"
          echo "$timestamp" > release_timestamp.txt

          mkdir package
          rsync -a --exclude='.git' ./ package/

          git submodule foreach --recursive 'bash -c "
            fullpath=\$(realpath .)
            relpath=\${fullpath#\$(realpath \"\$toplevel\")/}
            echo \"📂 Including submodule: \$relpath\"
            mkdir -p \"\$toplevel/package/\$relpath\"
            rsync -a --exclude=.git \"\$fullpath/\" \"\$toplevel/package/\$relpath/\"
          "'

          cd package
          zip -r ../ddpc_alpha.zip . -x "*.git*" "*.github*" "*.vscode*" "*node_modules*"
          cd ..
          echo "✅ Created ddpc_alpha.zip"

      - name: 🚀 Create new DEV release and upload ZIP
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          timestamp=$(cat release_timestamp.txt)
          release_name="alpha_${timestamp}"
          echo "📤 Creating release: $release_name"
          gh release create DEV ddpc_alpha.zip \
            --title "$release_name" \
            --notes "Automatisch generiertes DEV Release vom $timestamp"

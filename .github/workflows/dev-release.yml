name: DEV Release Automation

on:
  push:
    branches:
      - alpha
  workflow_dispatch:

env:
  REPO_NAME: ${{ github.repository }}
  RELEASE_TAG: DEV

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo with submodules (token auth)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Show submodules from .gitmodules
        run: |
          echo "üîç Submodules defined in .gitmodules:"
          git config -f .gitmodules --name-only --get-regexp path | while read path_key; do
            name=${path_key%.path}
            url_key=${name}.url
            path=$(git config -f .gitmodules --get "$path_key")
            url=$(git config -f .gitmodules --get "$url_key")
            echo " - Path: $path"
            echo "   URL: $url"
          done

      - name: Update submodule URLs with token for authentication
        run: |
          echo "üîß Updating submodule URLs with token for authentication"
          git config -f .gitmodules --get-regexp url | while read key url; do
            new_url=${url/https:\/\/github.com/https:\/\/x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com}
            git config -f .gitmodules "$key" "$new_url"
            echo "Updated $key to $new_url"
          done
          git submodule sync --recursive

      - name: Initialize and update submodules
        run: |
          git submodule update --init --recursive

      - name: Checkout 'dev' branch in submodules recursively
        run: |
          git submodule foreach --recursive '
            echo "üìÅ Submodule: $name"
            git fetch origin
            if git show-ref --verify --quiet refs/remotes/origin/dev; then
              echo "‚úÖ Branch dev found in $name, checking out"
              git checkout dev
              git pull origin dev
            else
              echo "‚ö†Ô∏è Branch dev not found in $name"
            fi
          '

      - name: Get current timestamp
        id: timestamp
        run: |
          echo "timestamp=$(TZ=Europe/Vienna date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT

      - name: Clean up existing DEV release if exists
        run: |
          if gh release view $RELEASE_TAG &>/dev/null; then
            echo "üßπ Deleting existing $RELEASE_TAG release..."
            gh release delete $RELEASE_TAG --yes
          else
            echo "‚ÑπÔ∏è No existing $RELEASE_TAG release found."
          fi
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

      - name: Create ZIP archive of repo (without .git)
        run: |
          zipfile="ddpc-${{ steps.timestamp.outputs.timestamp }}.zip"
          echo "üì¶ Creating ZIP archive $zipfile"
          mkdir package
          rsync -a --exclude='.git' ./ package/
          cd package
          zip -r ../$zipfile .
          cd ..
          ls -lh $zipfile

      - name: Create new DEV release with ZIP asset
        run: |
          gh release create $RELEASE_TAG ddpc-*.zip \
            --title "DEV Release $RELEASE_TAG" \
            --notes "Automated DEV release from branch alpha at ${{ steps.timestamp.outputs.timestamp }}" \
            --prerelease
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
